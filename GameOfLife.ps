/arg{exch def} def
/board { 
[[0 0 0 1 0]
[0 1 0 1 0]
[1 0 0 1 0]] } def 

% size x y drawsquare
/drawsquare { 1 dict begin
          /size arg
          newpath
          moveto
          0 size rlineto
          size 0 rlineto
          0 size neg rlineto
          size 0 rlineto
          fill
} def

/drawboard { 1 dict begin
    /theboard arg
    /x 0 def
    /y 0 def
    3 {
        5 { 
            1  theboard x get y pstack  get eq { 
                /xpos x def 
                /ypos y def
                xpos 100 mul
                ypos 100 mul
                100 drawsquare
            } if
            /y y 1 add def
        } repeat
        /y 0 def
        /x x 1 add def 
    } repeat
end
} def 

/assert-are-equal {
	0 dict begin
    /observed arg
    /expected arg
    observed type expected type eq not 
    observed expected eq not or {
    (bad. expected something else) print stop} if
	end
} def

/assert-are-equal-array {
	0 dict begin
    /observed arg
    /expected arg
    observed length expected length ne {(not the same length) print stop} if

    0 1 observed length 1 sub
    {/i arg 
    observed i get expected i get ne {(not the same array) print stop} if
    } for 
    end
} def



1 0 0 setrgbcolor
board drawboard
showpage

