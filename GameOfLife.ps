/arg{exch def} def
/board { 
[
[0 0 0 1 0 0 0 0 0 0 0 0]
[0 0 0 0 0 0 0 0 0 0 0 0]
[0 0 0 1 0 0 0 0 0 0 0 0]
[0 0 0 1 0 0 0 0 0 0 0 0]
[0 0 0 1 0 0 0 0 0 0 0 0]
[0 0 0 1 0 0 0 0 0 0 0 0]
[0 0 0 1 0 0 0 0 0 0 0 0]
[0 0 0 1 0 0 0 0 0 0 0 0]
[0 0 0 1 0 0 0 0 0 0 0 0]
[0 0 0 1 0 0 0 0 0 0 0 0]
[0 0 0 1 0 0 0 0 0 0 0 0]
[0 0 0 1 0 0 0 0 0 0 0 0]
] } def 

% size x y drawsquare
/drawsquare { 1 dict begin
          /size arg
          newpath
          moveto
          0 size rlineto
          size 0 rlineto
          0 size neg rlineto
          size 0 rlineto
          fill
} def

/drawboard { 1 dict begin
    /board arg
    /x 0 def
    /y 0 def
    board length {
        board 0 get length { 
            1  board x get y get eq { 
                /xpos x def 
                /ypos y def
                xpos 100 mul
                ypos 100 mul
                100 drawsquare
            } if
            /y y 1 add def
        } repeat
        /y 0 def
        /x x 1 add def 
    } repeat
end
} def 

/assert-are-equal {
	0 dict begin
    /observed arg
    /expected arg
    observed type expected type eq not 
    observed expected eq not or {
    (bad. expected something else) print stop} if
	end
} def

/assert-are-equal-array {
	0 dict begin
    /observed arg
    /expected arg
    observed length expected length ne {(not the same length) print stop} if

    0 1 observed length 1 sub
    {/i arg 
    observed i get expected i get ne {(not the same array) print stop} if
    } for 
    end
} def

1 0 0 setrgbcolor
board drawboard
showpage

%Takes in (x y board) returns true or false 
/checkalive {
    /board arg
    /y arg
    /x arg
    /i -1 def 
    /j -1 def
    /alivecells 0 def
    3 {
        3 { 
            i x add 12 lt 
            {
            	i x add 0 lt 
        		{}
            	{
                	j y add 0 lt 
                	{}
                	{
                		j y add 12 lt
                        {
                         	0 i eq 0 j eq eq  {} 
            				{
                            	/alivecells
            					board i x add get 
                				j y add get
                				alivecells add def
            				}
            				ifelse
                        }
                        {}
                        ifelse
                		
                	}
                	ifelse
            		
            	}
            	ifelse 
            }
            {}
            ifelse
            
            /i i 1 add def 
        } repeat
        /i -1 def
        /j j 1 add def 
    } repeat
    
    alivecells 3 lt 
    { 
    	alivecells 0 eq
    	{ false }
        { true }
    	ifelse
    }
    { false }
    ifelse
} def


0 0 board checkalive
pstack
pop

3 10 board checkalive
pstack
pop